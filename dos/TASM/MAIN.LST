Turbo Assembler	 Version 4.1	    12/04/23 00:26:43	    Page 1
main.asm



      1	0000			     model small
      2	0000			     stack 512
      3	0000			     .data
      4	0000  57 65 6C 63 6F 6D	65+	     m1	db "Welcome friends. The message is print successfully $"
      5	      20 66 72 69 65 6E	64+
      6	      73 2E 20 54 68 65	20+
      7	      6D 65 73 73 61 67	65+
      8	      20 69 73 20 70 72	69+
      9	      6E 74 20 73 75 63	63+
     10	      65 73 73 66 75 6C	6C+
     11	      79 20 24
     12	      =0034			     msglen equ	$-m1
     13
     14	0034  0D 0A D0 92 D0 B2	D0+	     kiril db 13, 10, "Введите какое-нибудь число: $"
     15	      B5 D0 B4 D0 B8 D1	82+
     16	      D0 B5 20 D0 BA D0	B0+
     17	      D0 BA D0 BE D0 B5	2D+
     18	      D0 BD D0 B8 D0 B1	D1+
     19	      83 D0 B4 D1 8C 20	D1+
     20	      87 D0 B8 D1 81 D0	BB+
     21	      D0 BE 3A 20 24
     22	006A  31 32 33 34 35 36	37+	     number db "1234567890 $"
     23	      38 39 30 20 24
     24	0076  48 45 4C 4C 4F 24		     Data1 DB 48h,45h,4Ch,4Ch,4Fh,'$' ;	создали массив
     25	007C  03			     sym1 db 03h
     26	007D  10*(01)			     dynamic_array DB 10h DUP (1)
     27	008D  10*(38)			     dynamic_array2 db 10h DUP (38h)
     28
     29					     ; для открытия файла
     30	009D  31 2E 61 73 6D 00		     FileName db '1.asm', 0h
     31	00A3  4F 4B 24			     OkStr db 'OK', '$'
     32	00A6  45 52 52 4F 52 24		     ErrorStr db 'ERROR', '$'
     33
     34	00AC  14*(00) 24		     Buffer db 14h dup (0), '$'		   ; буффер на 20 символов
     35
     36	00C1			     .code
     37	0000				     printString PROC ;	напечатать массив байт
     38						 ; ARG string:WORD
     39						 ; MOV dx, [string]
     40						 ; print string
     41	0000  B4 09				 MOV ah, 09h
     42	0002  CD 21				 int 21h
     43
     44						 ; new line
     45	0004  B2 0A				     MOV dl, 10
     46	0006  B4 02				     MOV ah, 02h
     47	0008  CD 21				     INT 21h
     48	000A  B2 0D				     MOV dl, 13
     49	000C  B4 02				     MOV ah, 02h
     50	000E  CD 21				     INT 21h
     51	0010  C3				 RET
     52	0011				     printString ENDP
     53
     54	0011				     printSymbol proc ;	напечатать символ
     55	0011  B4 02				     mov ah, 02h
     56	0013  CD 21				     int 21h
     57						 ; new line
Turbo Assembler	 Version 4.1	    12/04/23 00:26:43	    Page 2
main.asm



     58	0015  B2 0A				     MOV dl, 10
     59	0017  B4 02				     MOV ah, 02h
     60	0019  CD 21				     INT 21h
     61	001B  B2 0D				     MOV dl, 13
     62	001D  B4 02				     MOV ah, 02h
     63	001F  CD 21				     INT 21h
     64	0021  C3				     RET
     65	0022				     printSymbol endp
     66
     67
     68	0022				     openFile proc   ; дескриптор файла при открытии		    +
     69				     вернется в регистр	AX
     70	0022  B4 3D				     mov ah, 3dh ; функция открытия файла
     71	0024  B0 00				     mov al, 0	 ; читать
     72	0026  BA 009Dr				     mov dx, offset FileName ; имя файла
     73	0029  CD 21				     int 21h	 ; выполнить
     74	002B  C3				     RET	 ; вернуть управление в точку запуска
     75	002C				     openFile endp
     76
     77	002C				     readFile proc   ; Код ошибки если CF установлен к CY; если +
     78				     ошибок не было	то в	AX будет количество прочитанных   +
     79				     байт
     80	002C  B4 3F				     mov ah, 3fh ; функция чтения файла
     81	002E  B9 0014				     mov cx, 14h ; сколько байт прочитать
     82	0031  BA 00ACr				     mov dx, offset Buffer ; То что будем читать
     83	0034  CD 21				     int 21h	 ; выполнить
     84	0036  E8 FFC7				     call printString
     85	0039  C3				     ret
     86	003A				     readFile endp
     87
     88	003A				     writeFile proc
     89
     90	003A  C3				     ret
     91	003B				     writeFile endp
     92					     ; в BX дескриптор файла, т.е то что	было при		    +
     93				     открытии нужно вернуть	в bx -> mov bx, ax
     94	003B				     closeFile proc
     95	003B  B4 3E				     mov ah, 3eh ; функция закрытия файла
     96	003D  CD 21				     int 21h
     97	003F  C3				     RET
     98	0040				     closeFile endp
     99
    100				     .startup
1   101	0040			     @Startup:
1   102	0040  BA 0000s			     MOV     DX,@data
1   103	0043  8E DA			     MOV     DS,DX
1   104	0045  8C D3			     MOV     BX,SS
1   105	0047  2B DA			     SUB     BX,DX
1   106	0049  D1 E3 D1 E3 D1 E3	D1+	     SHL     BX,4
    107	      E3
1   108	0051  FA			     CLI
1   109	0052  8E D2			     MOV     SS,DX
1   110	0054  03 E3			     ADD     SP,BX
1   111	0056  FB			     STI
    112	0057  B8 0000s			     mov ax, @data	 ; установка в ds адреса
    113	005A  8E D8			     mov ds, ax		 ; Для указания сегмента данных	    +
    114				     используется регистр DS
Turbo Assembler	 Version 4.1	    12/04/23 00:26:43	    Page 3
main.asm



    115
    116	005C  EB 41 90			     jmp Scip
    117
    118	005F  E8 FFC0			     call openFile
    119	0062  72 10			     jc	Error	 ; проверить флаг на ошибку; Перейти при	    +
    120				     наличии переноса CF	= 1
    121	0064  8B D8			     mov bx, ax	 ; в bx записываем дескриптор файла,		    +
    122				     который открывали,	bx понадобится для правильного	    +
    123				     закрытия файла
    124
    125	0066  E8 FFC3			     call readFile ; вызываем функцию чтения файла
    126	0069  72 09			     jc	Error	 ; проверить флаг на ошибку; Перейти при	    +
    127				     наличии переноса CF	= 1
    128
    129
    130
    131	006B  E8 FFCD			     call closeFile
    132	006E  BA 00A3r			     mov dx, offset OkStr
    133	0071  EB 04 90			     jmp write
    134
    135
    136
    137
    138
    139
    140
    141
    142	0074			     Error:
    143	0074  BA 00A6r			     mov dx, offset ErrorStr
    144
    145	0077			     Write:
    146	0077  E8 FF86			     call printString
    147					     ; mov dx, offset m1
    148					     ; call printString
    149
    150					     ; тут рассматриваю динамические	массивы
    151					     ; mov dx, offset dynamic_array
    152					     ; call printString
    153
    154					     ; mov dx, offset dynamic_array2
    155					     ; mov dynamic_array2[15], '$' ; помещаем конец строки в	    +
    156				     массив чтобы не показыал всякую	ересь
    157					     ; call printString
    158
    159					     ; jmp exit		  ; Использование этого оператора	    +
    160				     позволяет	нам перемещаться	по коду. То есть		    +
    161				     фактически команда JMP меняет регистр IP
    162
    163					     ; mov dl, sym1
    164					     ; call printSymbol
    165
    166
    167
    168
    169					     ; тестирую	первый цикл
    170	007A  B9 000A			     mov cx, 10
    171	007D			     p1:	     ; метка p1
Turbo Assembler	 Version 4.1	    12/04/23 00:26:43	    Page 4
main.asm



    172	007D  49			     dec cx
    173	007E  51			     push cx
    174	007F  BB 0001			     mov bx, 1
    175	0082  B9 0015			     mov cx, 21
    176	0085  BA 008Dr			     mov dx, offset dynamic_array2
    177	0088  C6 06 009Cr 24		     mov dynamic_array2[15], '$'
    178	008D  E8 FF70			     call printString
    179					     ; mov ah, 40h
    180					     ; int 21h
    181	0090  59			     pop cx
    182	0091  E3 1C			     jcxz exit ; если регистор cx равен 0, то прыгай на exit
    183	0093  EB E8			     jmp p1 ; если условие выше не сработало то прыгаем  +
    184				     на метку p1
    185
    186
    187
    188
    189					     ; тестирую	второй цикл
    190	0095  B1 06			     mov cl, 6 ; сколько	будед итераций
    191	0097			     writeLoop:
    192	0097  BA 006Ar			     mov dx, offset number ; то что будем печатать
    193	009A  E8 FF63			     call printString
    194	009D  E2 F8		     loop writeLoop	   ; она будет переводить нас на	указанную  +
    195				     метку	до тех пор пока регистр CX не станет	равный	    +
    196				     нулю.
    197
    198					     ; открытие	файла
    199					     ; AH    3dH
    200					     ; AL    Режим	доступа (0 = чтение, 1 = запись, 2 =	оба,	и  +
    201				     т.д.)
    202					     ; DS:DX	     адрес	ASCII  Строки с нулевым символом в   +
    203				     конце
    204					     ; Возврат
    205					     ; AX    код ошибки если CF установлен к CY
    206					     ;	     Дескриптор файла, если нет ошибок
    207
    208
    209
    210	009F			     Scip:
    211	009F  FD			     std ; установка флага направления
    212	00A0  FC			     cld ; очистка флага направления
    213
    214
    215	00A1  B1 0A			     mov cl, 10		   ; настройка	счётчик
    216	00A3  BE 006Ar			     mov si, offset number ; адрес	строки загружаем	в si
    217	00A6  FC			     cld		   ; направление
    218	00A7			     loop1:
    219	00A7  AC			     lodsb		   ; загрузить	символ ; это специальная+
    220				     команда, которая загружает 1 байт в регистр AL по	    +
    221				     адресу DS:SI	и изменяет регистр SI в зависимости	от	    +
    222				     флага	направления.
    223	00A8  8A D0			     mov dl, al		   ; для вывода
    224	00AA  E8 FF64			     call printSymbol	   ; выводим символ
    225	00AD  E2 F8		     loop loop1
    226
    227
    228	00AF			     exit:
Turbo Assembler	 Version 4.1	    12/04/23 00:26:43	    Page 5
main.asm



    229	00AF  B4 4C			     mov ah, 04ch ; функция DOS выхода из программы
    230	00B1  B0 00			     mov al, 0h	     ; код возврата
    231	00B3  CD 21			     int 21h ; Вызов DOS остановка программы
    232
    233				     end
Turbo Assembler	 Version 4.1	    12/04/23 00:26:43	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/04/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "00:26:43"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@STARTUP			  Near	 _TEXT:0040
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:00AC
CLOSEFILE			  Near	 _TEXT:003B
DATA1				  Byte	 DGROUP:0076
DYNAMIC_ARRAY			  Byte	 DGROUP:007D
DYNAMIC_ARRAY2			  Byte	 DGROUP:008D
ERROR				  Near	 _TEXT:0074
ERRORSTR			  Byte	 DGROUP:00A6
EXIT				  Near	 _TEXT:00AF
FILENAME			  Byte	 DGROUP:009D
KIRIL				  Byte	 DGROUP:0034
LOOP1				  Near	 _TEXT:00A7
M1				  Byte	 DGROUP:0000
MSGLEN				  Number 0034
NUMBER				  Byte	 DGROUP:006A
OKSTR				  Byte	 DGROUP:00A3
OPENFILE			  Near	 _TEXT:0022
P1				  Near	 _TEXT:007D
PRINTSTRING			  Near	 _TEXT:0000
PRINTSYMBOL			  Near	 _TEXT:0011
READFILE			  Near	 _TEXT:002C
SCIP				  Near	 _TEXT:009F
SYM1				  Byte	 DGROUP:007C
WRITE				  Near	 _TEXT:0077
WRITEFILE			  Near	 _TEXT:003A
WRITELOOP			  Near	 _TEXT:0097

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0200 Para	  Stack	  STACK
  _DATA				  16  00C1 Word	  Public  DATA
_TEXT				  16  00B5 Word	  Public  CODE
